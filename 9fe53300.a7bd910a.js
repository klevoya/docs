(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{108:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),s=p(n),d=a,m=s["".concat(i,".").concat(d)]||s[d]||u[d]||c;return n?r.a.createElement(m,o(o({ref:t},b),{},{components:n})):r.a.createElement(m,o({ref:t},b))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,i=new Array(c);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var b=2;b<c;b++)i[b]=n[b];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),c=(n(0),n(108)),i={title:"CLI"},o={unversionedId:"cli/cli",id:"cli/cli",isDocsHomePage:!1,title:"CLI",description:"The Inspect vulnerability scanner can be accessed through a CLI which can be installed and updated from the NPM registry:",source:"@site/inspect/cli/cli.md",slug:"/cli/cli",permalink:"/inspect/cli/cli",version:"current",sidebar:"inspect",previous:{title:"Getting Started",permalink:"/inspect/about/getting-started"}},l=[],b={rightToc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"The Inspect vulnerability scanner can be accessed through a CLI which can be installed and updated from the NPM registry:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm install --global @klevoya/inspect\n")),Object(c.b)("h1",{id:"help"},"help"),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"help")," command prints the current Inspect version and a description of commands that can be run."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"inspect help\ninspect help <command>\n\n# Example\ninspect help check\n")),Object(c.b)("h1",{id:"login"},"login"),Object(c.b)("p",null,"Inspect requires an account to use the public Inspect server for executing commands.\nCreating an account or authenticating Inspect with an existing account is done by running the ",Object(c.b)("inlineCode",{parentName:"p"},"login")," command:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"inspect login\n# should open a browser window to log in / sign up\n")),Object(c.b)("p",null,"Authenticating with Inspect stores the login information in ",Object(c.b)("inlineCode",{parentName:"p"},"~/.inspect/auth.json"),".\nThis file should be kept safe as it includes the authentication token."),Object(c.b)("h1",{id:"logout"},"logout"),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"logout")," command deletes the ",Object(c.b)("inlineCode",{parentName:"p"},"~/.inspect/auth.json")," file."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"inspect logout\n")),Object(c.b)("h1",{id:"check"},"check"),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"check")," command queues a smart contract for analysis.\nOnly the compiled version (WebAssembly) of a smart contract is needed, its C++ source code is not required and never uploaded."),Object(c.b)("h4",{id:"arguments"},"Arguments"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Option"),Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"contract-wasm-path")),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"path to a compiled EOSIO ",Object(c.b)("inlineCode",{parentName:"td"},".wasm")," WebAssembly file")))),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"inspect check <contract-wasm-path>\n\n# Example\ninspect check ~/my-contracts/test/build/test.wasm\n")),Object(c.b)("h1",{id:"reports"},"reports"),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"reports")," command lists all finished analysis reports."),Object(c.b)("h4",{id:"optional-arguments"},"Optional Arguments"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Option"),Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"report-id")),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"ID of a report to view")))),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"inspect reports [report-id]\n\n# Examples\ninspect reports\ninspect reports 123\n")))}p.isMDXComponent=!0}}]);