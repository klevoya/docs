(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{108:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),u=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),l=u(n),p=r,b=l["".concat(o,".").concat(p)]||l[p]||f[p]||c;return n?a.a.createElement(b,i(i({ref:t},s),{},{components:n})):a.a.createElement(b,i({ref:t},s))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=p;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<c;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),c=(n(0),n(108)),o={title:"Deferred Transactions"},i={unversionedId:"hydra/guides/deferred-tx",id:"hydra/guides/deferred-tx",isDocsHomePage:!1,title:"Deferred Transactions",description:"On real EOSIO networks, when a smart contract schedules a deferred transaction, it might or might not be picked up and executed by a block producing node after the specified delay.",source:"@site/docs/hydra/guides/deferred-tx.md",slug:"/hydra/guides/deferred-tx",permalink:"/hydra/hydra/guides/deferred-tx",editUrl:"https://github.com/klevoya/docs/edit/master/docs/hydra/guides/deferred-tx.md",version:"current"},d=[],s={rightToc:d};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"On real EOSIO networks, when a smart contract schedules a deferred transaction, it might or might not be picked up and executed by a block producing node after the specified delay.\nThis non-determinism is not desirable for testing, therefore, the deferred transaction model in Hydra is different: Deferred transactions are recorded, but not automatically executed. They can be manually executed at any time disregarding their specified delay."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let blockchain = new Blockchain(config);\nlet tester = blockchain.createAccount(`tester`);\ntester.setContract(blockchain.contractTemplates[`deferredtx`]);\n\ntest(async () => {\n  // assume the schedule action of the contract schedules a deferred tx\n  await tester.contract.schedule();\n\n  let deferredTransactions = blockchain.getDeferredTransactions();\n\n  expect(deferredTransactions).toMatchObject([\n    {\n      actions: [\n        {\n          account: "tester",\n          name: "scheduledef",\n          authorization: [\n            {\n              actor: "tester",\n              permission: "active"\n            }\n          ],\n          data: {\n            from_contract: "tester",\n            value: "1"\n          }\n        }\n      ],\n      delay_sec: 1\n    }\n  ]);\n\n  // deferred transactions are like standard transactions\n  // and can be executed using the sendTransaction method\n  await blockchain.sendTransaction(deferredTransactions[0]);\n  deferredTransactions = blockchain.getDeferredTransactions();\n  // when a deferred transaction is executed, it is **not** cleared\n  expect(deferredTransactions.length).toBe(2);\n\n  // deferred transactions must be cleared manually\n  blockchain.clearDeferredTransactions();\n  deferredTransactions = blockchain.getDeferredTransactions();\n  expect(deferredTransactions.length).toBe(0);\n});\n')))}u.isMDXComponent=!0}}]);